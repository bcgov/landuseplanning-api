swagger: "2.0"
info:
  version: "1.0.6"
  title: Land Use Planning API
host: localhost:3000
basePath: /api
tags:
- name: "login"
  description: "Everything about Logging in"
  externalDocs:
    description: "Find out more"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "project"
  description: "Operations about projects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "recentActivity"
  description: "Operations about activities"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "document"
  description: "Operations about documents"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "organization"
  description: "Operations about organizations"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "user"
  description: "Operations about users"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "search"
  description: "Operations about searching"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
- name: "topic"
  description: "Operations about topic"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/landuseplanning-api.git"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.


     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.


     The following syntax must be used in the 'Authorization' header :

         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"

### Project Definitions
  ProjId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  ProjObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
      tags:
        type: string
        example: "[['public']]"
        ## TODO: Add more fields here.
  GroupObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool user"
  Project:
    type: string
    description: "Optional fields to return."
    example: name|type
    #TODO: Fix enums
    enum: &projectFields
      - existingLandUsePlans
      - centroid
      - currentPhase
      - currentPhaseCode
      - currentPhaseName
      - description
      - details
      - engagementStatus
      - logos
      - backgroundInfo
      - engagementLabel
      - engagementInfo
      - documentInfo
      - overlappingRegionalDistricts
      - name
      - projectLead
      - partner
      - agreements
      - region
      - projectDirector
      - type
      - read
  TopicSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +name,-name
    enum: &projectSortByFields
      - +name
      - -name
      - +type
      - -type
      - +region
      - -region
      - +currentPhaseName
      - -currentPhaseName
      - +engagementStatus
      - -engagementStatus

### Project Definitions
  RecentActivityId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  RecentActivityObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
      tags:
        type: string
        example: "[['public']]"
        ## TODO: Add more fields here.
  RecentActivity:
    type: string
    description: "Optional fields to return."
    example: name|type
    #TODO: Fix enums
    enum: &activityFields
      - tags
      - geometry
      - geometryName
      - properties
      - isDeleted
      - applicationID

### Document Definitions
  DocId:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool document"
  DocObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool document"
        ## TODO: Add more fields here.
  DocumentFields:
    type: string
    description: "Optional fields to return."
    example: name|type
    #TODO: Fix enums
    enum: &documentFields
      - displayName
      - alt
      - documentFileName
      - internalOriginalName
      - internalURL
      - internalMime
      - internalSize

### Comment Definitions
  CommentId:
    type: object
    properties:
      comment:
        type: string
        example: "A cool user"
  CommentObject:
    type: object
    properties:
      project:
        type: string
        example: "Example project"
      commentAuthor:
        type: object
        example: "A cool comment"
        ## TODO: Add more fields here.
        properties:
          contactName:
            type: string
            example: "Bob Smith"
          location:
            type: string
            example: "Victoria"
  CommentFields:
    type: string
    description: "Optional fields to return."
    example: name|commentAuthor
    #TODO: Fix enums
    enum: &commentFields
      - 'author'
      - 'project'
      - 'comment'
      - 'commentId'
      - 'dateAdded'
      - 'datePosted'
      - 'dateUpdated'
      - 'eaoNotes'
      - 'eaoStatus'
      - 'isAnonymous'
      - 'location'
      - 'period'
      - 'proponentNotes'
      - 'proponentStatus'
      - 'publishedNotes'
      - 'rejectedNotes'
      - 'rejectedReason'
      - 'valuedComponents'
      - 'read'
      - 'write'
      - 'delete'
  CommentSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +commentStatus,-dateAdded
    enum: &commentSortByFields
      - +author
      - -author
      - +dateAdded
      - -dateAdded

### Comment Period Definitions
  CommentStatus:
    type: object
    properties:
      status:
        type: string
        description: "Can be the following commands: publish, defer, reject, reset."
        example: "publish"
  CommentPeriodId:
    type: object
    properties:
      commentperiod:
        type: string
        example: "A comment period Id"
  CommentPeriodObject:
    type: object
    properties:
      project:
        type: string
        example: ""
      ## TODO: Add more fields here.
  CommentPeriodFields:
    type: string
    description: "Optional fields to return."
    example: startDate|endDate|description
    #TODO: Fix enums
    enum: &commentPeriodFields
      - __v
      - _schemaName
      - addedBy
      - additionalText
      - ceaaAdditionalText
      - ceaaInformationLabel
      - ceaaRelatedDocuments
      - classificationRoles
      - classifiedPercent
      - commenterRoles
      - commentPeriodInfo
      - dateAdded
      - dateCompleted
      - dateCompletedEst
      - dateStarted
      - dateStartedEst
      - dateUpdated
      - downloadRoles
      - documents
      - informationLabel
      - instructions
      - isClassified
      - isPublished
      - isResolved
      - isVetted
      - commentingMethod
      - externalToolPopupText
      - surveySelected
      - openHouses
      - periodType
      - phase
      - phaseName
      - project
      - publishedPercent
      - rangeOption
      - rangeType
      - relatedDocuments
      - resolvedPercent
      - updatedBy
      - userCan
      - vettedPercent
      - vettingRoles
      - read
      - write
      - delete
  CommentPeriodSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +commentStatus,-dateAdded
    enum: &commentPeriodSortByFields
      - +author
      - -author
      - +dateStarted
      - -dateStarted
      - +dateCompleted
      - -dateCompleted

### Survey Response Definitions
  SurveyStatus:
    type: object
    properties:
      status:
        type: string
        description: "Can be the following commands: publish, defer, reject, reset."
        example: "publish"
  SurveyResponseId:
    type: object
    properties:
      survey:
        type: string
        example: "A survey response Id"
  SurveyResponseObject:
    type: object
    properties:
      project:
        type: string
  SurveyResponseFields:
    type: string
    description: "Optional fields to return."
    example: author|dateAdded|project
    enum: &surveyResponseFields
      - author
      - location
      - dateAdded
      - project
      - period
      - survey
      - responses
      - read
      - write
      - delete
  SurveyResponseSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +author,-dateAdded
    enum: &surveyResponseSortByFields
      - +author
      - -author
      - +dateAdded
      - -dateAdded

  ### Survey Definitions
  SurveyStatus:
    type: object
    properties:
      status:
        type: string
        description: "Can be the following commands: publish, defer, reject, reset."
        example: "publish"
  SurveyId:
    type: object
    properties:
      survey:
        type: string
        example: "A survey Id"
  SurveyObject:
    type: object
    properties:
      project:
        type: string
        # example: ""
  SurveyFields:
    type: string
    description: "Optional fields to return."
    example: name|lastSaved|dateAdded
    enum: &surveyFields
      - name
      - dateAdded
      - lastSaved
      - project
      - questions
      - read
      - write
      - delete
  SurveySortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +name,-lastSaved
    enum: &surveySortByFields
      - +name
      - -name
      - +lastSaved
      - -lastSaved
      - +dateAdded
      - -dateAdded

### Search Definitions
  SearchObject:
    type: object
    properties:
      keywords:
        type: string
        example: "Project Name"
  SearchSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +score,-score
    enum: &searchSortByFields
      - +headline
      - -headline
      - +score
      - -score
      - +displayName
      - -displayName
      - +datePosted
      - -datePosted
      - +documentType
      - -documentType
      - +documentFileSize
      - -documentFileSize

  AuditObject:
    type: object
    properties:
      keywords:
        type: string
        example: "Project Name"
  AuditSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +score,-score
    enum: &auditSortByFields
      - +score
      - -score
      - +displayName
      - -displayName
      - +datePosted
      - -datePosted
      - +documentType
      - -documentType
      - +documentFileSize
      - -documentFileSize
  AuditFields:
    type: string
    description: "Optional fields to return."
    example: startDate|endDate|description
    #TODO: Fix enums
    enum: &auditFields
      - _schemaName
      - objId
      - action
      - meta
      - _objectSchema
      - addedBy
      - updatedBy
      - deletedBy
      - performedBy
      - timestamp

### Organization Definitions
  OrgId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  OrgObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
      tags:
        type: string
        example: "[['public']]"
        ## TODO: Add more fields here.
  Organization:
    type: string
    description: "Optional fields to return."
    example: name
    #TODO: Fix enums
    enum: &organizationFields
      - name
    enum: &organizationSortByFields
      - +name
      - -name

### Topic Definitions
  TopicId:
    type: object
    properties:
      comment:
        type: string
        example: "A cool user"
  TopicObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  TopicFields:
    type: string
    description: "Optional fields to return."
    example: name|description
    #TODO: Fix enums
    enum: &topicFields
      - 'description'
      - 'name'
      - 'pillar'
      - 'parent'
      - 'read'
  TopicSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +name,-name
    enum: &topicSortByFields
      - +name
      - -name
      - +description
      - -description
      - +type
      - -type
      - +pillar
      - -pillar

### User Definitions
  UserId:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool user"
  UserObject:
    type: object
    properties:
      displayName:
        type: string
        example: "Sally User"
      projectPermissions:
        type: array
        items:
          type: string

  ## TODO: Add more fields here.
  UserFields:
    type: string
    description: "Optional fields to return."
    example: displayName|roles
    #TODO: Fix enums
    enum: &userFields
      - displayName
      - firstName
      - lastName
      - idirUserGuid
      - projectPermissions
      - roles

### Vc Definitions
  VcId:
    type: object
    properties:
      comment:
        type: string
        example: "A cool user"
  VcObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  VcFields:
    type: string
    description: "Optional fields to return."
    example: name|description
    enum: &vcFields
      - 'code'
      - 'description'
      - 'name'
      - 'parent'
      - 'pillar'
      - 'project'
      - 'stage'
      - 'title'
      - 'type'
      - 'read'
      - 'write'
      - 'delete'
  VcSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +Type,-Type
    enum: &vcSortByFields
      - +Type
      - -Type

### Email Subscribe Definitions
  EmailSubscribeId:
    type: object
    properties:
      email:
        type: string
        example: "noreply@gov.bc.ca"
  EmailSubscribeObject:
    type: object
    properties:
      commentAuthor:
        type: object
        example: "A cool comment"
        ## TODO: Add more fields here.
        properties:
          email:
            type: string
            example: "noreply@gov.bc.ca"
          confirmed:
            type: boolean
            example: false
  EmailSubscribeFields:
    type: string
    description: "Optional fields to return."
    example: email|projects
    #TODO: Fix enums
    enum: &emailSubscribeFields
      - 'email'
      - 'project'
      - 'confirmed'
      - 'confirmKey'
      - 'dateSubscribed'
      - 'dateConfirmed'
      - 'read'
      - 'write'
      - 'delete'
  EmailSubscribeSortByFields:
    type: string
    description: "Optional fields to sort by (prefixed with + or - for order)"
    example: +project,-dateSubscribed
    enum: &emailSubscribeSortByFields
      - +email
      - -email
      - +project
      - -project
      - +dateSubscribed
      - -dateSubscribed

### Resource Definitions
  Coordinates:
    type: object
    properties:
      msg:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string

### Path Definitions
paths:
  /login/token:
    x-swagger-router-controller: login
    options:
      tags:
        - login
      operationId: loginOptions
      description: "Options for Login"
      summary: "Pre-flight request"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
        - login
      operationId: loginPost
      description: "Get a JWT in order to access certain protected routes."
      summary: "Get a Bearer token."
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Project Routes
  /project:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - project
      summary: "Create a new project"
      operationId: protectedPost
      description: "Create a new project object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
        - name: project
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - project
      summary: "Retrieve META associated with an project."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Get a Project that contain this specific disposition."
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Get a Project that relates to this crown lands file."
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Get a Project that relates to this purpose."
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Get a Project that relates to this subpurpose."
        - in: query
          collectionFormat: multi
          name: projectPhase
          type: string
          required: false
          description: "Get a Project that relates to this Project Phase."
        - in: query
          name: agreements
          type: string
          required: false
          description: "Get a Project that relates to this agreements."
        - in: query
          name: agency
          type: string
          required: false
          description: "Get a Project that relates to this subagencytype."
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Get a Project that relates to this businessUnit."
        - in: query
          name: client
          type: string
          required: false
          description: "Get a Project that relates to this client."
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Get a Project that relates to this tenureStage."
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Get a Project that relates to size of areaHectares."
        - in: query
          name: centroid
          required: false
          description: "Query projects that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Query project publish dates.  Multiple parameter instances and supported."
          type: string
          format: date-time
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get a list of projects"
      operationId: protectedGet
      description: "Authenticated access to retreiving projects."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Get a Project that contain this specific disposition."
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Get a Project that relates to this crown lands file."
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Get a Project that relates to this purpose."
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Get a Project that relates to this subpurpose."
        - in: query
          collectionFormat: multi
          name: projectPhase
          type: string
          required: false
          description: "Get a Project that relates to this Project Phase."
        - in: query
          name: agreements
          type: string
          required: false
          description: "Get a Project that relates to this agreements."
        - in: query
          name: agency
          type: string
          required: false
          description: "Get a Project that relates to this subagencytype."
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Get a Project that relates to this businessUnit."
        - in: query
          name: client
          type: string
          required: false
          description: "Get a Project that relates to this client."
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Get a Project that relates to this tenureStage."
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Get a Project that relates to size of areaHectares."
        - in: query
          name: centroid
          required: false
          description: "Query projects that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Query project publish dates.  Multiple parameter instances and supported."
          type: string
          format: date-time
        - in: query
          name: sortBy
          description: "Projects to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *projectSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project GET Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - project
      summary: "Retrieve META associated with an project."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get a project"
      operationId: protectedGet
      description: "Authenticated access to retreiving projects."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Comment Period Start Date that Projects must compare to"
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "Comment Period End Date that Projects must compare to"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - project
      summary: "Update an project"
      operationId: protectedPut
      description: "Update an project object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
        - name: ProjObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - project
      summary: "Delete an project"
      operationId: protectedDelete
      description: "Delete an project object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to delete"
          required: true
          type: string
        - name: ProjObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/publish:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - project
      summary: "Publish a project"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a project."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        # TODO: Define publish roles.
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/unpublish:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - project
      summary: "UnPublish a project"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role to a project."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        # TODO: Define publish roles.
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/project/{projId}/pin:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get pins on a project"
      operationId: publicPinGet
      description: "Authenticated access to retreiving pins on a project."
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - in: query
          name: sortBy
          description: "Fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/pin:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get pins on a project"
      operationId: protectedPinGet
      description: "Authenticated access to retreiving pins on a project."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - in: query
          name: sortBy
          description: "Fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - project
      summary: "Add Pins to a project"
      operationId: protectedAddPins
      description: "Adds pins to a project."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
        - name: pins
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/pin/{pinId}:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - name: pinId
          in: path
          description: "ID of pin to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - project
      summary: "Delete a PIN"
      operationId: protectedPinDelete
      description: "Delete specific PINS."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
          - name: projId
            in: path
            type: string
            required: true
            description: "PINS corresponding to a project."
          - name: pinId
            in: path
            type: string
            required: true
            description: "Delete PIN."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/group:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    # get:
    #   tags:
    #     - project
    #   summary: "Get groups on a project"
    #   operationId: protectedProjectGet
    #   description: "Authenticated access to retreiving groups on a project."
    #   security:
    #     - Bearer: []
    #   x-security-scopes:
    #     - staff
    #     - sysadmin
    #     - sysadmin
    #   parameters:
    #     - name: projId
    #       in: path
    #       description: "ID of project to get"
    #       required: true
    #       type: string
    #     - in: query
    #       name: sortBy
    #       description: "Fields to sort by."
    #       required: false
    #       type: array
    #       items:
    #         type: string
    #         enum: *searchSortByFields
    #     - in: query
    #       name: pageNum
    #       type: number
    #       required: false
    #       description: "Page number."
    #     - in: query
    #       name: pageSize
    #       type: number
    #       required: false
    #       description: "Number of results per page (if 'pageNum' is specified)."
    #   responses:
    #     "200":
    #       description: "Success"
    #       schema:
    #         $ref: "#/definitions/ProjObject"
    #     "403":
    #       description: "Access Denied"
    #       schema:
    #         $ref: "#/definitions/Error"
    post:
      tags:
        - project
      summary: "Add Groups to a project"
      operationId: protectedAddGroup
      description: "Adds group to a project."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
        - name: group
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/group/{groupId}:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - name: groupId
          in: path
          description: "ID of group to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - project
      summary: "Delete a Group"
      operationId: protectedGroupDelete
      description: "Delete specific group."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
        - staff
      parameters:
          - name: projId
            in: path
            type: string
            required: true
            description: "Groups corresponding to a project."
          - name: groupId
            in: path
            type: string
            required: true
            description: "Delete Group."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - project
      summary: "Update a group"
      operationId: protectedGroupPut
      description: "Update a group"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
        - name: groupId
          in: path
          description: "ID of group to update"
          required: true
          type: string
        - name: groupObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/GroupObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/group/{groupId}/members:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - name: groupId
          in: path
          description: "ID of group to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - project
      summary: "Add Contact to a project group"
      operationId: protectedAddGroupMembers
      description: "Adds contact to a project group."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
        - sysadmin
      parameters:
        - name: projId
          in: path
          description: "ID of project to update"
          required: true
          type: string
        - name: groupId
          in: path
          description: "ID of group to update"
          required: true
          type: string
        - name: members
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProjObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get a Group"
      operationId: protectedGroupGetMembers
      description: "Get specific group."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
        - staff
      parameters:
          - name: projId
            in: path
            type: string
            required: true
            description: "Group corresponding to a project."
          - name: groupId
            in: path
            type: string
            required: true
            description: "Get Group."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /project/{projId}/group/{groupId}/members/{memberId}:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - name: groupId
          in: path
          description: "ID of group to get"
          required: true
          type: string
        - name: memberId
          in: path
          description: "ID of member to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - project
      summary: "Delete a member from a group"
      operationId: protectedDeleteGroupMembers
      description: "Delete specific members from a project group."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
        - staff
      parameters:
          - name: projId
            in: path
            type: string
            required: true
            description: "Members corresponding to a project."
          - name: groupId
            in: path
            type: string
            required: true
            description: "Group."
          - name: memberId
            in: path
            type: string
            required: true
            description: "Delete Member."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/project:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - project
      summary: "Retrieve META associated with projects"
      operationId: publicHead
      description: "Get META from the request, without returning the payload in question."
      parameters:
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: existingLandUsePlans
          type: string
          required: false
          description: "Existing Land Use Plans"
        - in: query
          name: centroid
          required: false
          description: "Query projects that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: currentPhase
          required: false
          description: "A Phases object"
          type: string
        - in: query
          name: currentPhaseCode
          required: false
          description: "A code associated with the current project's phase"
          type: string
        - in: query
          name: currentPhaseName
          required: false
          description: "The current phase's name"
          type: string
        - in: query
          name: description
          required: false
          description: "A description of the project"
          type: string
        - in: query
          name: engagementStatus
          required: false
          description: "The status of the engagement determined by the LUP team"
          type: string
        - in: query
          name: logos
          type: string
          required: false
          description: "Project logos"
        - in: query
          name: backgroundInfo
          required: false
          description: "The background information for the project"
          type: string
        - in: query
          name: engagementInfo
          required: false
          description: "The engagement information for the project"
          type: string
        - in: query
          name: documentInfo
          required: false
          description: "The document page information for the project"
          type: string
        - in: query
          name: overlappingRegionalDistricts
          required: false
          description: "The Overlapping Regional Districts of the proposed project"
          type: string
        - in: query
          name: name
          required: false
          description: "The name of the proposed project"
          type: string
        - in: query
          name: projectLead
          required: false
          description: "The name of the lead of the project"
          type: string
        - in: query
          name: partner
          required: false
          description: "Partner organizations"
          type: string
        - in: query
          name: region
          required: false
          description: "Region of the project"
          type: string
        - in: query
          name: projectDirector
          required: false
          description: "Name of the PD"
          type: string
        - in: query
          name: agreements
          required: false
          description: "agreements of the project"
          type: string
        - in: query
          name: read
          required: false
          description: "The read permissions of the project"
          type: string
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Comment Period Start Date that Projects must compare to"
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "Comment Period End Date that Projects must compare to"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get a list of public projects"
      operationId: publicGet
      description: "Retreiving public projects."
      parameters:
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: existingLandUsePlans
          type: string
          required: false
          description: "Existing Land Use Plans"
        - in: query
          name: centroid
          required: false
          description: "Query projects that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: currentPhase
          required: false
          description: "A Phases object"
          type: string
        - in: query
          name: currentPhaseCode
          required: false
          description: "A code associated with the current project's phase"
          type: string
        - in: query
          name: currentPhaseName
          required: false
          description: "The current phase's name"
          type: string
        - in: query
          name: description
          required: false
          description: "A description of the project"
          type: string
        - in: query
          name: engagementStatus
          required: false
          description: "The engagement status determined by the LUP team"
          type: string
        - in: query
          name: logos
          type: string
          required: false
          description: "Project logos"
        - in: query
          name: backgroundInfo
          required: false
          description: "The background information for the project"
          type: string
        - in: query
          name: engagementLabel
          required: false
          description: "The engagement label for the project"
          type: string
        - in: query
          name: engagementInfo
          required: false
          description: "The engagement information for the project"
          type: string
        - in: query
          name: documentInfo
          required: false
          description: "The document page information for the project"
          type: string
        - in: query
          name: overlappingRegionalDistricts
          required: false
          description: "The Overlapping Regional Districts of the proposed project"
          type: string
        - in: query
          name: name
          required: false
          description: "The name of the proposed project"
          type: string
        - in: query
          name: projectLead
          required: false
          description: "The name of the lead of the project"
          type: string
        - in: query
          name: partner
          required: false
          description: "Partner organizations"
          type: string
        - in: query
          name: region
          required: false
          description: "Region of the project"
          type: string
        - in: query
          name: projectDirector
          required: false
          description: "Name of the PD"
          type: string
        - in: query
          name: agreements
          required: false
          description: "agreements of the project"
          type: string
        - in: query
          name: read
          required: false
          description: "The read permissions of the project"
          type: string
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Start date for comment periods."
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "End date for comment periods."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/project/{projId}:
    x-swagger-router-controller: project
    options:
      tags:
        - project
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Project GET Route"
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - project
      summary: "Get a project"
      operationId: publicGet
      description: "Public access to retreiving projects."
      parameters:
        - name: projId
          in: path
          description: "ID of project to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Project fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *projectFields
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Comment Period Start Date that Projects must compare to"
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "Comment Period End Date that Projects must compare to"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/ProjObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### RecentActivity Routes
  /public/recentActivity:
    x-swagger-router-controller: recentActivity
    options:
      tags:
        - recentActivity
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on RecentActivity Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - recentActivity
      summary: "Get top recentActivity"
      operationId: publicGet
      description: "Get top recentActivity."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /recentActivity:
    x-swagger-router-controller: recentActivity
    options:
      tags:
        - recentActivity
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on RecentActivity Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - recentActivity
      summary: "Create a new recentActivity"
      operationId: protectedPost
      description: "Create a new recentActivity object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
        - name: recentActivity
          in: body
          required: true
          schema:
            $ref: "#/definitions/RecentActivityId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - recentActivity
      summary: "Delete a recentActivity(s)"
      operationId: protectedDelete
      description: "Delete specific activities."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
          - name: applicationID
            in: query
            type: string
            required: true
            description: "Delete activities corresponding to an applicationID."
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /recentActivity/{recentActivityId}:
    x-swagger-router-controller: recentActivity
    options:
      tags:
        - recentActivity
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on RecentActivity GET Route"
      parameters:
        - name: recentActivityId
          in: path
          description: "ID of recentActivity to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - recentActivity
      summary: "Get recentActivity by ID"
      operationId: protectedGet
      description: "Get recentActivity."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: recentActivityId
          in: path
          description: "ID of recentActivity to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Recent Activity fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *activityFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - recentActivity
      summary: "Update an recentActivity"
      operationId: protectedPut
      description: "Update an recentActivity object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
        - name: recentActivityId
          in: path
          description: "ID of recentActivity to update"
          required: true
          type: "string"
        - name: RecentActivityObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/RecentActivityObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - recentActivity
      summary: "Delete an recentActivity"
      operationId: protectedDelete
      description: "Delete an recentActivity object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
        - name: recentActivityId
          in: path
          description: "ID of recentActivity to delete"
          required: true
          type: "string"
        - name: RecentActivityObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/RecentActivityObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/RecentActivityObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Documents
  /document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Create a new document"
      operationId: protectedPost
      description: "Create a new document object."
      summary: "Create a new document object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload."
          required: true
          type: file
        - name: project
          in: formData
          description: "The application to bind this document to."
          required: false
          type: string
        - name: type
          in: formData
          description: "The type to bind this document to."
          required: false
          type: string
        - name: documentSource
          in: formData
          description: "The documentSource of this document."
          required: false
          type: string
        - name: documentAuthor
          in: formData
          description: "The documentAuthor of the file."
          required: false
          type: string
        - name: projectPhase
          in: formData
          description: "The project phase of the file."
          required: false
          type: string
        - name: datePosted
          in: formData
          description: "The datePosted of the file."
          required: false
          type: string
        - name: dateUploaded
          in: formData
          description: "The dateUploaded of the file."
          required: false
          type: string
        - name: documentName
          in: formData
          description: "The documentName of the file."
          required: false
          type: string
        - name: description
          in: formData
          description: "The description of the file."
          required: false
          name: keywords
          in: formData
          description: "The keywords of the file."
          required: false
          type: string
          type: string
        - name: labels
          in: formData
          description: "The labels of the file."
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file."
          required: false
          type: string
        - name: documentFileName
          in: formData
          description: "The documentFileName of the file."
          required: false
          type: string
        - name: alt
          in: formData
          description: "The alternative text of the file."
          required: false
          type: string
        - name: internalOriginalName
          in: formData
          description: "The internalOriginalName of the file. This is only used for documents related to comments."
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The comment pointer of the file."
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of documents"
      operationId: protectedGet
      description: "Authenticated access to retreiving a document."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
      parameters:
        - in: query
          name: docIds
          description: "Search using an array of document ids."
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: project
          description: "Documents relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Documents relating to a particular Comment(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Documents that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a document"
      operationId: protectedGet
      description: "Authenticated access to retreiving a document."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Update/Upload a document"
      operationId: protectedPut
      description: "Update a document object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      consumes:
        - multipart/form-data
      parameters:
        - name: docId
          in: path
          description: "ID of document to update"
          required: true
          type: string
        - name: upfile
          in: formData
          description: "The file to upload."
          required: true
          type: file
        - name: project
          in: formData
          description: "The application to bind this document to."
          required: false
          type: string
        - name: type
          in: formData
          description: "The type to bind this document to."
          required: false
          type: string
        - name: documentSource
          in: formData
          description: "The documentSource of this document."
          required: false
          type: string
        - name: documentAuthor
          in: formData
          description: "The documentAuthor of the file."
          required: false
          type: string
        - name: projectPhase
          in: formData
          description: "The project phase of the file."
          required: false
          type: string
        - name: datePosted
          in: formData
          description: "The datePosted of the file."
          required: false
          type: string
        - name: dateUploaded
          in: formData
          description: "The dateUploaded of the file."
          required: false
          type: string
        - name: documentName
          in: formData
          description: "The documentName of the file."
          required: false
          type: string
        - name: description
          in: formData
          description: "The description of the file."
          required: false
          type: string
        - name: keywords
          in: formData
          description: "The keywords of the file."
          required: false
          type: string
        - name: labels
          in: formData
          description: "The labels of the file."
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file."
          required: false
          type: string
        - name: documentFileName
          in: formData
          description: "The documentFileName of the file."
          required: false
          type: string
        - name: alt
          in: formData
          description: "The alternative text of the file."
          required: false
          type: string
        - name: eaoStatus
          in: formData
          description: "The eaoStatus of the file."
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - document
      summary: "Delete a document"
      operationId: protectedDelete
      description: "Delete a document object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: docId
          in: path
          description: "ID of document to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/publish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Publish a document"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a document."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
        # TODO: Define publish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of document to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/unpublish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "UnPublish a document"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role on a document."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
        # TODO: Define unpublish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of document to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a document"
      operationId: protectedDownload
      description: "Authenticated access to retreiving a document binary."
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/fetch:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a document"
      operationId: protectedDownload
      description: "Authenticated access to retreiving a document binary."
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/fetch/{filename}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
        - name: filename
          in: path
          description: "filename of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a document"
      operationId: protectedOpen
      description: "Authenticated access to retreiving a document binary."
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to open"
          required: true
          type: string
        - name: filename
          in: path
          description: "filename of document to open"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Create a new document from public"
      operationId: unProtectedPost
      description: "Create a new document object from public."
      summary: "Create a new document object from public."
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload."
          required: true
          type: file
        - name: project
          in: formData
          description: "The project to bind this document to."
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The comment to bind this document to."
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file."
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of documents"
      operationId: publicGet
      description: "Retreiving public documents."
      parameters:
        - in: query
          name: docIds
          description: "Search using an array of document ids."
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: project
          description: "Documents relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: documentSource
          type: string
          required: false
          description: "The type of document(shapefile, banner image, etc.)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a document"
      operationId: publicGet
      description: "Public access to retreiving documents."
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a document"
      operationId: publicDownload
      description: "Authenticated access to retreiving a document binary."
      parameters:
        - name: docId
          in: path
          description: "ID of document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
### Organizations
  /organization:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - organization
      summary: "Create an organization"
      operationId: protectedPost
      description: "Create a new organization object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: org
          in: body
          required: true
          schema:
            $ref: "#/definitions/OrgId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get a list of documents"
      operationId: protectedGet
      description: "Authenticated access to retreiving organizations."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: project
          description: "Documents relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Organization fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization GET Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get an organization"
      operationId: protectedGet
      description: "Authenticated access to retreiving organizations."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Organization fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "Update an organization"
      operationId: protectedPut
      description: "Update an organization object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to update"
          required: true
          type: string
        - name: org
          in: body
          required: true
          schema:
            $ref: "#/definitions/OrgObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}/publish:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "Publish a organization"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a organization."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        # TODO: Define publish roles.
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /organization/{orgId}/unpublish:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - organization
      summary: "UnPublish a organization"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role to a organization."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        # TODO: Define publish roles.
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/organization:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get a list of documents"
      operationId: publicGet
      description: "Retreiving public organizations."
      parameters:
        - in: query
          name: companyType
          description: "Organizations of a particular company type"
          type: string
          required: false
        - in: query
          name: fields
          description: "Organization fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
        - in: query
          name: sortBy
          description: "Organization fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *organizationSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/organization/{orgId}:
    x-swagger-router-controller: organization
    options:
      tags:
        - organization
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Organization GET Route"
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - organization
      summary: "Get a document"
      operationId: publicGet
      description: "Public access to retreiving organizations."
      parameters:
        - name: orgId
          in: path
          description: "ID of organization to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Organization fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *organizationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/OrgObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### User
  /user:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a list of users"
      operationId: protectedGet
      description: "Authenticated access to retreiving a user."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - staff
      parameters:
        - in: query
          name: fields
          description: "User fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - user
      summary: "Create a new user"
      operationId: protectedPost
      description: "Create a new user object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/{userId}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User OPTIONS Route"
      parameters:
        - name: userId
          in: path
          description: "ID of user to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "User fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a user"
      operationId: protectedGet
      description: "Private access to retreiving a user."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: userId
          in: path
          description: "ID of user to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "User fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: "Update a user"
      operationId: protectedPut
      description: "Update a user object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: userId
          in: path
          description: "ID of user to update"
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/email/{userEmail}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User OPTIONS Route"
      parameters:
        - name: userEmail
          in: path
          description: "Email of user to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a user"
      operationId: protectedGetByEmail
      description: "Private access to retreiving a user."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: userEmail
          in: path
          description: "Email of user to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "User fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/addPermission/{userId}/{projId}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User GET Route"
      parameters:
        - name: userId
          in: path
          description: "ID of user"
          required: true
          type: string
        - name: projId
          in: path
          description: "ID of project to update user with"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: "Update a user"
      operationId: protectedAddPermission
      description: "Private access to upating a user with a permission."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
        - create-projects
      parameters:
        - name: userId
          in: path
          description: "ID of user to update"
          required: true
          type: string
        - name: projId
          in: path
          description: "ID of project to update user with"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/removePermission/{userId}/{projId}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on User GET Route"
      parameters:
        - name: userId
          in: path
          description: "ID of user"
          required: true
          type: string
        - name: projId
          in: path
          description: "ID of project to update user with"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: "Update a user"
      operationId: protectedRemovePermission
      description: "Private access to upating a user with a permission."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
        - create-projects
      parameters:
        - name: userId
          in: path
          description: "ID of user to update"
          required: true
          type: string
        - name: projId
          in: path
          description: "ID of project to remove from user"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Comments
  /comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - comment
      summary: "Retrieve META associated with a comment ."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: period
          description: "Comments relating to a particular Comment Period"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: sortBy
          description: "Comment fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of comments"
      operationId: protectedGet
      description: "Authenticated access to retrieving comments."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: period
          description: "Comments relating to a particular Comment Period"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: count
          description: "Enables/Disables count. Query count=true to enable."
          required: false
          type: boolean
        - in: query
          name: sortBy
          description: "Comment fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
        - in: query
          name: pending
          description: "Filter where eaoStatus is pending"
          required: false
          type: boolean
        - in: query
          name: published
          description: "Filter where eaoStatus is published"
          required: false
          type: boolean
        - in: query
          name: deferred
          description: "Filter where eaoStatus is deferred"
          required: false
          type: boolean
        - in: query
          name: rejected
          description: "Filter where eaoStatus is rejected"
          required: false
          type: boolean
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - comment
      summary: "Create a new comment"
      operationId: protectedPost
      description: "Create a new comment object."
      summary: "Create a new comment object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /comment/export/{periodId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: periodId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Export comments for a period"
      operationId: protectedExport
      description: "Authenticated access to retrieving an export of comments for a particular period."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: periodId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /comment/{commentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a comment"
      operationId: protectedGet
      description: "Authenticated access to retrieving a comment."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: populateNextComment
          description: "Flag to get next comment information."
          required: false
          type: boolean
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Update a comment"
      operationId: protectedPut
      description: "Update a comment object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - multipart/form-data
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to update"
          required: true
          type: string
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{commentId}/status:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
        - name: status
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentStatus"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Changes eaoStatus field of a comment"
      operationId: protectedStatus
      description: "Sets published, deferred, or rejected for the status of a comment. Also handles permissions tagging when dealing with pubished/unpublish."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to update"
          required: true
          type: string
        - name: status
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentStatus"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - comment
      summary: "Create a new comment"
      operationId: unProtectedPost
      description: "Create a new comment object."
      summary: "Create a new comment object."
      parameters:
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - comment
      summary: "Retrieve META associated with a comment ."
      operationId: publicHead
      description: "Get META from the request, without returning the payload in question."
      parameters:
        - in: query
          name: period
          description: "The ID of the period associated with the comments."
          type: array
          required: true
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of comments"
      operationId: publicGet
      description: "Retrieving public comments."
      parameters:
        - in: query
          name: period
          description: "Comments relating to a particular Comment Period"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: count
          description: "Enables/Disables count. Query count=true to enable."
          type: boolean
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: sortBy
          description: "Comment fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment/{commentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a comment"
      operationId: publicGet
      description: "Public access to retrieving a comment."
      parameters:
        - name: commentId
          in: path
          description: "ID of comment to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Comment fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## CommentPeriods
  /commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - commentperiod
      summary: "Create a new commentperiod"
      operationId: protectedPost
      description: "Create a new commentperiod object."
      summary: "Create a new commentperiod object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: period
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        - in: query
          name: projectId
          type: string
          required: true
          description: "Id of the project"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of comment periods"
      operationId: protectedGet
      description: "Authenticated access to retreiving a commentperiod."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: project
          description: "CommentPeriods relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: count
          description: "Enables/Disables count. Query count=true to enable."
          required: false
          type: boolean
        - in: query
          name: sortBy
          description: "Comment fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *commentPeriodSortByFields
        - in: query
          name: fields
          description: "commentperiod fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentPeriodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /commentperiod/{commentPeriodId}/summary:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod GET Route"
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Retrieve META associated with a comment period."
      operationId: protectedSummary
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: "string"
        - in: query
          name: project
          description: "CommentPeriods relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "CommentPeriods that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /commentperiod/{commentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod GET Route"
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - commentperiod
      summary: "Retrieve META associated with a comment period."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
        - in: query
          name: project
          description: "CommentPeriods relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "CommentPeriods that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a commentperiod"
      operationId: protectedGet
      description: "Authenticated access to retreiving a commentperiod."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
        - in: query
          name: project
          description: "CommentPeriods relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "commentperiod fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentPeriodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Update/Upload a commentperiod"
      operationId: protectedPut
      description: "Update a commentperiod object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to update"
          required: true
          type: string
        - name: cp
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentPeriodObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - commentperiod
      summary: "Delete a commentperiod"
      operationId: protectedDelete
      description: "Delete a commentperiod object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{commentPeriodId}/publish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod GET Route"
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Publish a commentperiod"
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a commentperiod."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{commentPeriodId}/unpublish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod GET Route"
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "UnPublish a commentperiod"
      operationId: protectedUnPublish
      description: "Removes the singular instance of the 'public' role on a commentperiod."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to update"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of comment period(s)"
      operationId: publicGet
      description: "Retreiving public comment period(s)."
      parameters:
        - in: query
          name: project
          description: "CommentPeriods relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "commentperiod fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentPeriodFields
        - in: query
          name: sortBy
          description: "Comment fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *commentPeriodSortByFields
        - in: query
          name: commentPeriodInfo
          required: false
          description: "The information for the comment period"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod/{commentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on commentperiod GET Route"
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a commentperiod"
      operationId: publicGet
      description: "Public access to retreiving comments."
      parameters:
        - name: commentPeriodId
          in: path
          description: "ID of commentperiod to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "commentperiod fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriodObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /search:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on search Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of things related to these keywords"
      operationId: protectedGet
      description: "Retreiving items relating to the given keywords."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: _id
          description: "Grab (via _id) specific document"
          type: string
          required: false
          items:
            type: string
        - in: query
          name: keywords
          description: "Full Text Search based on keywords"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: populate
          description: "Populate Project object ID"
          type: boolean
          required: false
        - in: query
          name: dataset
          description: "Dataset to search on"
          type: string
          required: false
        - in: query
          name: _schemaName
          description: "Schema to search on"
          type: string
          required: false
        - in: query
          name: project
          description: "Project to specifically query"
          type: string
          required: false
        - in: query
          name: pageNum
          description: "Page number to skip to."
          type: number
          required: false
        - in: query
          name: pageSize
          description: "# Records to limit"
          type: number
          required: false
        - in: query
          name: sortBy
          description: "Fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: and
          collectionFormat: multi
          required: false
          description: "Query: multiple parameter instances are supported using AND."
          type: string
        - in: query
          name: or
          collectionFormat: multi
          required: false
          description: "Query: multiple parameter instances are supported using OR."
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /public/search:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on search Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of things related to these keywords"
      operationId: publicGet
      description: "Retreiving items relating to the given keywords."
      parameters:
        - in: query
          name: keywords
          description: "Full Text Search based on keywords"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: dataset
          description: "Dataset to search on"
          type: string
          required: false
        - in: query
          name: project
          description: "Project to specifically query"
          type: string
          required: false
        - in: query
          name: query
          description: "Project to specifically query"
          type: string
          required: false
        - in: query
          name: populate
          description: "Populate Project object ID"
          type: boolean
          required: false
        - in: query
          name: pageNum
          description: "Page number to skip to."
          type: number
          required: false
        - in: query
          name: pageSize
          description: "# Records to limit"
          type: number
          required: false
        - in: query
          name: sortBy
          description: "Fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: and
          collectionFormat: multi
          required: false
          description: "Query: multiple parameter instances are supported using AND."
          type: string
        - in: query
          name: or
          collectionFormat: multi
          required: false
          description: "Query: multiple parameter instances are supported using OR."
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SearchObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Audit
  /audit:
    x-swagger-router-controller: audit
    options:
      tags:
        - audit
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on audit Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuditObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - audit
      summary: "Get a list of things related to these keywords"
      operationId: protectedGet
      description: "Retreiving items relating to the given keywords."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - sysadmin
      parameters:
        - in: query
          name: keywords
          description: "Full Text Audit based on keywords"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Audit fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *auditFields
        - in: query
          name: action
          description: "Dataset to search on"
          type: string
          required: false
        - in: query
          name: timestamp
          description: "Timestamp filtering"
          type: string
          required: false
        - in: query
          name: pageNum
          description: "Page number to skip to."
          type: number
          required: false
        - in: query
          name: pageSize
          description: "# Records to limit"
          type: number
          required: false
        - in: query
          name: sortBy
          description: "Fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *auditSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AuditObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Survey Routes
  /survey:
    x-swagger-router-controller: survey
    options:
      tags:
        - survey
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - survey
      summary: "Create a new survey"
      operationId: protectedPost
      description: "Create a new survey object."
      summary: "Create a new survey object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: survey
          in: body
          required: true
          schema:
            $ref: "#/definitions/SurveyObject"
        - in: query
          name: projectId
          type: string
          required: true
          description: "Id of the project"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - survey
      summary: "Get a list of surveys"
      operationId: protectedGet
      description: "Authenticated access to retreiving a survey."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: project
          description: "Surveys relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: commentPeriod
          description: "Survey selected by a particular CommentPeriod"
          type: string
          required: false
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: count
          description: "Enables/Disables count. Query count=true to enable."
          required: false
          type: boolean
        - in: query
          name: sortBy
          description: "Survey fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *surveySortByFields
        - in: query
          name: fields
          description: "survey fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /survey/{surveyId}:
    x-swagger-router-controller: survey
    options:
      tags:
        - survey
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey GET Route"
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - survey
      summary: "Retrieve META associated with a survey."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to get"
          required: true
          type: string
        - in: query
          name: project
          description: "Surveys relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Surveys that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - survey
      summary: "Get a survey"
      operationId: protectedGet
      description: "Authenticated access to retreiving a survey."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to get"
          required: true
          type: string
        - in: query
          name: project
          description: "Surveys relating to a particular Project(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "survey fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - survey
      summary: "Update/Upload a survey"
      operationId: protectedPut
      description: "Update a survey object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to update"
          required: true
          type: string
        - name: s
          in: body
          required: true
          schema:
            $ref: "#/definitions/SurveyObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - survey
      summary: "Delete a survey"
      operationId: protectedDelete
      description: "Delete a survey object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/survey:
    x-swagger-router-controller: survey
    options:
      tags:
        - survey
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - survey
      summary: "Get a list of surveys(s)"
      operationId: publicGet
      description: "Retreiving public survey(s)."
      parameters:
        - in: query
          name: project
          description: "Surveys relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: commentPeriod
          description: "Survey selected by a particular CommentPeriod"
          type: string
          required: false
        - in: query
          name: fields
          description: "survey fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyFields
        - in: query
          name: sortBy
          description: "Survey fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *surveySortByFields
        - in: query
          name: surveyInfo
          required: false
          description: "The information for the survey"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/survey/{surveyId}:
    x-swagger-router-controller: survey
    options:
      tags:
        - survey
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey GET Route"
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - survey
      summary: "Get a survey"
      operationId: publicGet
      description: "Public access to retreiving surveys."
      parameters:
        - name: surveyId
          in: path
          description: "ID of survey to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "survey fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyFields
        
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Survey Response Routes
  /surveyResponse:
    x-swagger-router-controller: surveyResponse
    options:
      tags:
        - surveyResponse
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey response Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - surveyResponse
      summary: "Get a list of survey responses"
      operationId: protectedGet
      description: "Authenticated access to retrieving survey responses."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - in: query
          name: period
          description: "Survey responses relating to a particular Comment Period"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: project
          description: "Surveys relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Survey response fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyResponseFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: count
          description: "Enables/Disables count. Query count=true to enable."
          required: false
          type: boolean
        - in: query
          name: sortBy
          description: "Survey response fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *surveyResponseSortByFields
        - in: query
          name: pending
          description: "Filter where eaoStatus is pending"
          required: false
          type: boolean
        - in: query
          name: published
          description: "Filter where eaoStatus is published"
          required: false
          type: boolean
        - in: query
          name: deferred
          description: "Filter where eaoStatus is deferred"
          required: false
          type: boolean
        - in: query
          name: rejected
          description: "Filter where eaoStatus is rejected"
          required: false
          type: boolean
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /surveyResponse/{surveyResponseId}:
    x-swagger-router-controller: surveyResponse
    options:
      tags:
        - surveyResponse
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey response GET Route"
      parameters:
        - name: surveyResponseId
          in: path
          description: "ID of survey response to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - surveyResponse
      summary: "Get a survey response"
      operationId: protectedGet
      description: "Authenticated access to retrieving a survey response."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: surveyResponseId
          in: path
          description: "ID of survey response to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Survey response fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyResponseFields
        - in: query
          name: populateNextComment
          description: "Flag to get next comment information."
          required: false
          type: boolean
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - surveyResponse
      summary: "Update a survey response"
      operationId: protectedPut
      description: "Update a surveyResponse object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      consumes:
        - multipart/form-data
      parameters:
        - name: surveyResponseId
          in: path
          description: "ID of survey response to update"
          required: true
          type: string
        - name: surveyResponse
          in: body
          required: true
          schema:
            $ref: "#/definitions/SurveyResponseObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/surveyResponse:
    x-swagger-router-controller: surveyResponse
    options:
      tags:
        - survey
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on survey response route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - surveyResponse
      summary: "Get a list of survey responses"
      operationId: publicGet
      description: "Retreiving public survey response(s)."
      parameters:
        - in: query
          name: project
          description: "Survey responses relating to a particular Project(s)"
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "survey response fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *surveyResponseFields
        - in: query
          name: sortBy
          description: "Survey response fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *surveyResponseSortByFields
        - in: query
          name: surveyResponseInfo
          required: false
          description: "The information for the survey response"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - surveyResponse
      summary: "Create a new survey response"
      operationId: unProtectedPost
      description: "Create a new survey response object."
      summary: "Create a new survey response object."
      parameters:
        - name: surveyResponse
          in: body
          required: true
          schema:
            $ref: "#/definitions/SurveyResponseObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /surveyResponse/export/{periodId}:
    x-swagger-router-controller: surveyResponse
    options:
      tags:
        - surveyResponse
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: periodId
          in: path
          description: "ID comment period responses to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Export survey responses for a given comment period"
      operationId: protectedExport
      description: "Authenticated access to retrieving an export of survey responses for a particular period."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: periodId
          in: path
          description: "ID of comment period responses to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /surveyResponse/export/{periodId}/survey/{surveyId}:
    x-swagger-router-controller: surveyResponse
    options:
      tags:
        - surveyResponse
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on comment GET Route"
      parameters:
        - name: periodId
          in: path
          description: "ID of comment period responses to get"
          required: true
          type: string
        - name: surveyId
          in: path
          description: "ID of a survey to get responses by"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Export survey responses for a given comment period and survey"
      operationId: protectedExport
      description: "Authenticated access to retrieving an export of survey responses for a particular period."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: periodId
          in: path
          description: "ID of comment period responses to get"
          required: true
          type: string
        - name: surveyId
          in: path
          description: "ID of a survey to get responses by"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SurveyResponseObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Topic Routes
  /topic:
    x-swagger-router-controller: topic
    options:
      tags:
        - topic
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Topic Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - topic
      summary: "Create a new topic"
      operationId: protectedPost
      description: "Create a new topic object."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: topic
          in: body
          required: true
          schema:
            $ref: "#/definitions/TopicId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - topic
      summary: "Get a list of topics"
      operationId: protectedGet
      description: "Authenticated access to retrieving topics."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: fields
          description: "Topic fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *topicFields
        - in: query
          name: sortBy
          description: "Topic fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *topicSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /topic/{topicId}:
    x-swagger-router-controller: topic
    options:
      tags:
        - topic
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on topic GET Route"
      parameters:
        - name: topicId
          in: path
          description: "ID of topic to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - topic
      summary: "Get a topic"
      operationId: protectedGet
      description: "Authenticated access to retreiving topics."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: topicId
          in: path
          description: "ID of topic to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Topic fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *topicFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - topic
      summary: "Update/Upload a topic"
      operationId: protectedPut
      description: "Update a topic object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: topicId
          in: path
          description: "ID of topic to update"
          required: true
          type: string
        - name: cp
          in: body
          required: true
          schema:
            $ref: "#/definitions/TopicObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - topic
      summary: "Delete an topic"
      operationId: protectedDelete
      description: "Delete an topic object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: topicId
          in: path
          description: "ID of topic to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TopicObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Vc Routes
  /vc:
    x-swagger-router-controller: vc
    options:
      tags:
        - vc
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Topic Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - vc
      summary: "Create a new vc"
      operationId: protectedPost
      description: "Create a new vc object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: vc
          in: body
          required: true
          schema:
            $ref: "#/definitions/VcId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - vc
      summary: "Get a list of vcs"
      operationId: protectedGet
      description: "Authenticated access to retrieving vcs."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: projectId
          type: string
          required: false
          description: "Id of the project"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: fields
          description: "Vc fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *vcFields
        - in: query
          name: sortBy
          description: "VC fields to sort by."
          required: false
          type: array
          items:
            type: string
            enum: *vcSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /vc/{vcId}:
    x-swagger-router-controller: vc
    options:
      tags:
        - vc
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on vc GET Route"
      parameters:
        - name: vcId
          in: path
          description: "ID of vc to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - vc
      summary: "Get a vc"
      operationId: protectedGet
      description: "Authenticated access to retreiving vcs."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: vcId
          in: path
          description: "ID of vc to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Vc fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *vcFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - vc
      summary: "Update/Upload a vc"
      operationId: protectedPut
      description: "Update a vc object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      consumes:
        - application/json
      parameters:
        - name: vcId
          in: path
          description: "ID of vc to update"
          required: true
          type: string
        - name: cp
          in: body
          required: true
          schema:
            $ref: "#/definitions/VcObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - vc
      summary: "Delete an vc"
      operationId: protectedDelete
      description: "Delete an vc object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: vcId
          in: path
          description: "ID of vc to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/VcObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  ### Email subscribe
  /public/emailSubscribe:
    x-swagger-router-controller: emailSubscribe
    options:
      tags:
        - emailSubscribe
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on emailSubscribe Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - emailSubscribe
      summary: "Create a new email subscribe object"
      operationId: unProtectedPost
      description: "Create a new emailSubscribe object."
      summary: "Create a new emailSubscribe object."
      parameters:
        - name: emailSubscribe
          in: body
          required: true
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - emailSubscribe
      summary: "Confirm an email address"
      operationId: unProtectedPut
      summary: "Confirm an email address"
      parameters:
        - in: query
          name: email
          type: string
          required: true
          description: "the email address to be confirmed"
        - in: query
          name: confirmKey
          type: string
          required: true
          description: "The unique key to authenticate the request"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - emailSubscribe
      summary: "Unsubscribe an email address"
      operationId: unProtectedDelete
      summary: "Unsubscribe an email address"
      parameters:
        - in: query
          name: email
          type: string
          required: true
          description: "the email address to be unsubscribed"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - emailSubscribe
      summary: "Retrieve META associated with an email subscribe object."
      operationId: publicHead
      description: "Get META from the request, without returning the payload in question."
      parameters:
        - in: query
          name: period
          description: "The ID of the period associated with the email subscribe objects."
          type: array
          required: true
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Email Subscribe fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *emailSubscribeFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /emailSubscribe:
    x-swagger-router-controller: emailSubscribe
    options:
      tags:
        - emailSubscribe
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on emailSubscribe Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - emailSubscribe
      summary: "Create a new email subscribe object"
      operationId: protectedGet
      description: "Create a new emailSubscribe object."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: fields
          description: "Email Subscribe fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *emailSubscribeFields
        - in: query
          name: email
          type: string
          required: false
          description: "Email address of the subscriber"
        - in: query
          name: project
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
          description: "Project that emails belong to"
        - in: query
          name: confirmed
          type: boolean
          required: false
          description: "If the email address has been confirmed"
        - in: query
          name: dateSubscribed
          type: string
          required: false
          description: "The date that the email address was subscribed"
        - in: query
          name: dateConfirmed
          type: string
          required: false
          description: "The date that the email address was confirmed"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - emailSubscribe
      summary: "Retrieve META associated with an email subscribe object."
      operationId: protectedHead
      description: "Get META from the request, without returning the payload in question."
      parameters:
        - in: query
          name: period
          description: "The ID of the period associated with the email subscribe objects."
          type: array
          required: true
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Email Subscribe fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *emailSubscribeFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /emailSubscribe/{email}/project/{projectId}:
    x-swagger-router-controller: emailSubscribe
    options:
      tags:
        - emailSubscribe
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on emailSubscribe Route"
      parameters:
        - name: email
          in: path
          description: "The email address to unsubscribe"
          required: true
          type: "string"
        - name: projectId
          in: path
          description: "The project ID to be unsubscribed from"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - emailSubscribe
      summary: "Delete an email address"
      operationId: protectedDelete
      description: "Delete an email address"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: path
          name: email
          type: string
          required: true
          description: "The email address to be deleted"
        - name: projectId
          in: path
          description: "The project ID to be unsubscribed from"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /emailSubscribe/export/{projectId}:
    x-swagger-router-controller: emailSubscribe
    options:
      tags:
        - emailSubscribe
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on emailSubscribe GET Route"
      parameters:
        - name: projectId
          in: path
          description: "ID of project email subscribers to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - emailSubscribe
      summary: "Export email subscriptions for a given project"
      operationId: protectedExport
      description: "Authenticated access to retrieving an export of email subscribers for a particular project."
      security:
        - Bearer: []
      x-security-scopes:
        - staff
        - sysadmin
      parameters:
        - name: projectId
          in: path
          description: "ID of project email subscribers to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/EmailSubscribeObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"