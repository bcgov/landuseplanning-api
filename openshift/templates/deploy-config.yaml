---
kind: Template
apiVersion: build.openshift.io/v1
metadata:
  name: "${NAME}"
  annotations:
    description: Template for Node.js applications with a MongoDB database, based
      on OpenShift provided templates 'nodejs-mongodb-example' and 'mongodb-persistent-template'.
    tags: quickstart,nodejs,mongodb
    iconClass: icon-nodejs
labels:
  template: "${NAME}"
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${DATABASE_VOLUME_CAPACITY}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${NAME}-docs-pvc"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${DOCUMENT_VOLUME_CAPACITY}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Exposes and load balances the application pods
  spec:
    ports:
    - name: web
      port: 3000
      targetPort: 3000
    selector:
      name: "${NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
    path: "${APPLICATION_DOMAIN_PATH}"
    port:
      targetPort: web
    tls:
      termination: edge
    wildcardPolicy: None
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to deploy the application server
  spec:
    strategy:
      type: Rolling
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${APP_IMAGE_NAMESPACE}"
          name: "${APP_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: "${NAME}"
          image: " "
          ports:
          - containerPort: 3000
          env:
          - name: MONGODB_USERNAME
            value: "${DATABASE_USER}"
          - name: MONGODB_PASSWORD
            value: "${DATABASE_PASSWORD}"
          - name: MONGODB_DATABASE
            value: "${DATABASE_NAME}"
          - name: API_HOSTNAME
            value: "${APPLICATION_DOMAIN}"
          - name: MONGODB_SERVICE_HOST
            value: "${DATABASE_SERVICE_NAME}-${APP_DEPLOYMENT_TAG}"
          - name: KEYCLOAK_ENABLED
            value: 'true'
          - name: MINIO_HOST
            value: "${MINIO_HOST}"
          - name: MINIO_ACCESS_KEY
            value: "${MINIO_ACCESS_KEY}"
          - name: MINIO_SECRET_KEY
            value: "${MINIO_SECRET_KEY}"
          - name: CHES_AUTH_ENDPOINT
            value: "${CHES_AUTH_ENDPOINT}"
          - name: _EMAIL_CLIENTID
            value: "${_EMAIL_CLIENTID}"
          - name: _EMAIL_CLIENT_SECRET
            value: "${_EMAIL_CLIENT_SECRET}"
          - name: CHES_ENDPOINT
            value: "${CHES_ENDPOINT}"
          readinessProbe:
            timeoutSeconds: 3000
            initialDelaySeconds: 3
            httpGet:
              path: "${READINESS_PROBE_URL}"
              port: 3000
          livenessProbe:
            timeoutSeconds: 3000
            initialDelaySeconds: 30
            httpGet:
              path: "${READINESS_PROBE_URL}"
              port: 3000
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: "${NAME}-docs"
            mountPath: "${DOCUMENT_MOUNT_PATH}"
        volumes:
        - name: "${NAME}-docs"
          persistentVolumeClaim:
            claimName: "${NAME}-docs-pvc"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: mongodb-${NAME}
      port: 27017
      targetPort: 27017
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the database
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          namespace: "${MONGO_IMAGE_NAMESPACE}"
          name: mongodb:3.2
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: mongodb-${NAME}
          image: " "
          ports:
          - containerPort: 27017
          env:
          - name: MONGODB_USER
            value: "${DATABASE_USER}"
          - name: MONGODB_PASSWORD
            value: "${DATABASE_PASSWORD}"
          - name: MONGODB_DATABASE
            value: "${DATABASE_NAME}"
          - name: MONGODB_ADMIN_PASSWORD
            value: "${DATABASE_ADMIN_PASSWORD}"
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval='quit()'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
          resources:
            limits:
              memory: "${MEMORY_MONGODB_LIMIT}"
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/mongodb/data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}data"
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the frontend objects defined in this template.
  required: true
  value: landuseplanning-api
- name: MONGO_IMAGE_NAMESPACE
  displayName: mongo image namespace
  description: The OpenShift Namespace where the mongo ImageStream resides.
  value: openshift
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the Node.js container can use.
  value: 512Mi
- name: MEMORY_MONGODB_LIMIT
  displayName: Memory Limit (MongoDB)
  description: Maximum amount of memory the MongoDB container can use.
  value: 512Mi
- name: APPLICATION_DOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  value: lup-dev.apps.silver.devops.gov.bc.ca/api
- name: APPLICATION_DOMAIN_PATH
  displayName: Application Hostname Path
  description: The path for this service.
  value: "/api"
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  value: mongodb
- name: DATABASE_USER
  displayName: MongoDB Username
  description: Username for MongoDB user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
- name: DATABASE_PASSWORD
  displayName: MongoDB Password
  description: Password for the MongoDB user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: DATABASE_NAME
  displayName: Database Name
  value: landuseplanning
- name: DATABASE_ADMIN_PASSWORD
  displayName: Database Administrator Password
  description: Password for the database admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: PORT
  displayName: Application port
  description: Port that application is listening on for requests.
  value: '3000'
  required: true
- name: DATABASE_VOLUME_CAPACITY
  displayName: Database Volume Capacity
  description: Volume space available for mongo database, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
- name: DOCUMENT_VOLUME_CAPACITY
  displayName: Document Volume Capacity
  description: Volume space available for Document uploads, e.g. 512Mi, 2Gi.
  value: 2Gi
  required: true
- name: APP_IMAGE_NAME
  displayName: Application image name.
  description: Application image name.
  value: landuseplanning-api
  required: true
- name: APP_IMAGE_NAMESPACE
  displayName: Namespace containing application images.
  description: Namespace containing application images.
  value: xti26n-tools
  required: true
- name: APP_DEPLOYMENT_TAG
  displayName: Image tag to watch for changes and trigger deployment.
  description: Image tag to watch for changes and trigger deployment.
  value: dev
  required: true
- name: READINESS_PROBE_URL
  displayName: URL to watch for readiness.
  description: URL to watch for readiness.
  value: "/api/docs"
  required: true
- name: MINIO_HOST
  displayName: Minio Host
  description: The exposed hostname for the minio, if left blank a value will be defaulted.
  value: lup-dev.apps.silver.devops.gov.bc.ca/api
- name: MINIO_ACCESS_KEY
  displayName: Minio Access Key
  description: The access key for the Minio host.
  value: ''
- name: MINIO_SECRET_KEY
  displayName: Minio Secret Key
  description: The secret key for the Minio host.
  value: ''
- name: CHES_AUTH_ENDPOINT
  displayName: Email auth Endpoint
  description: the URL for the email auth endpoint
  value: ''
- name: _EMAIL_CLIENTID
  displayName: Email ClientID
  description: The client ID for the email service
  value: ''
- name: _EMAIL_CLIENT_SECRET
  displayName: Email Client Secret
  description: The client secret for the email service
  value: ''
- name: CHES_ENDPOINT
  displayName: Ches Endpoint
  description: The endpoint for the CHES service.
  value: ''
